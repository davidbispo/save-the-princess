c
q
results.uniq
result.uniq
c
q
can_go_to
n
delta_x
delta_y
n
delta_y.abs
delta_x.abs
grid
c
q
grid
delta_x.abs
q
delta_y.abs
delta_x.abs
q
delta_y.abs
delta_x.abs
q
delta_x.abs
delta_y.abs
q
result = described_class.nextMove(n,r,c,grid)
c
C
c
q
largest_distance_position == 0
largest_distance_position
c
q
delta_y
[ delta_x, delta_y ].map(&:abs)
[ delta_x, delta_y ].map(&:abs).each_with_index.max[1]
[ delta_x, delta_y ]
q
c
delta_x
c
[ delta_x, delta_y ].each_with_index.max
q
n
q
[ delta_x, delta_y ]
delta_y
[ delta_x, delta_y ]
[ delta_x, delta_y ].each_with_index.min[1]
n
delta_y.abs
delta_x.abs
q
n
p
n
delta_y
delta_x
n
c
q
qy
c
delta_y
n
c
n
delta_x
n
hor_mov_necessary
n
q
hor_mov_necessary
hor_mov_necessary, ver_mov_necessary = [ delta_x != 0, delta_y != 0 ]
delta_y
delta_x
n
c
q
delta_x, delta_y =  [ (pr_x - player_x) , (pr_y - player_y) ]
player_x
pr_x
q
pr_y
player_x
pr_x
board_rows
c
pr_x
pr_x - [ player_x , (pr_y - player_y) ]
c
[ player_x , (pr_y - player_y) ]
player_x
